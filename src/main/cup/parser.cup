package com.clysman.compiler;

import java_cup.runtime.*;
import java.io.*;

parser code {:
    private scanner scanner;

    public parser(scanner scanner) {
        this.scanner = scanner;
    }

    public void syntax_error(Symbol cur_token) {
        System.err.println("Erro de sintaxe na linha " + (cur_token.left+1) +
                          ", coluna " + (cur_token.right+1) +
                          ": token inesperado '" + cur_token.value + "'");
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        System.err.println("Erro de sintaxe não recuperável. Compilação interrompida.");
        System.exit(1);
    }
:}

scan with {: return scanner.next_token(); :};

terminal            SEMI, PLUS, MINUS, TIMES, LPAREN, RPAREN, DIVISION;
terminal Double     NUMBER;

non terminal            expr_list;
non terminal Double     expr;

precedence left PLUS, MINUS;
precedence left TIMES, DIVISION;

expr_list ::= expr_list expr:e SEMI         {: System.out.println(e);:}
            | expr:e SEMI                   {: System.out.println(e);:}
;
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;       :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;       :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;       :}
             | expr:e1 DIVISION expr:e2     {: RESULT = e1/e2;       :}
             | MINUS expr:e                 {: RESULT = -e;          :}
             | LPAREN expr:e RPAREN	        {: RESULT = e;           :}
             | NUMBER:n	                    {: RESULT = n;           :}
             ;